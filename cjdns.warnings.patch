diff -up ./node_build/make.js.warn ./node_build/make.js
--- ./node_build/make.js.warn	2022-10-11 19:35:56.267614431 -0400
+++ ./node_build/make.js	2022-10-11 19:36:00.785681273 -0400
@@ -41,7 +41,6 @@ Builder.configure({
         '-std=c99',
         '-Wall',
         '-Wextra',
-        '-Werror',
         '-Wno-pointer-sign',
         '-Wmissing-prototypes',
         '-pedantic',
diff -up ./tunnel/IpTunnel.c.warn ./tunnel/IpTunnel.c
--- ./tunnel/IpTunnel.c.warn	2020-10-05 17:46:19.000000000 -0400
+++ ./tunnel/IpTunnel.c	2022-10-11 19:32:11.293285713 -0400
@@ -622,7 +622,7 @@ static Iface_DEFUN incomingControlMessag
         Endian_bigEndianToHost32(x);                                \
     }))
 
-static bool prefixMatches6(uint8_t* addressA, uint8_t* refAddr, uint8_t prefixLen)
+static bool prefixMatches6(const uint8_t* addressA, const uint8_t* refAddr, uint8_t prefixLen)
 {
     if (!prefixLen) {
         Assert_true(Bits_isZero(refAddr, 16));
@@ -661,7 +661,7 @@ static bool isValidAddress4(uint8_t sour
     return prefixMatches4(compareAddr, conn->connectionIp4, conn->connectionIp4Alloc);
 }
 
-static bool isValidAddress6(uint8_t sourceAndDestIp6[32],
+static bool isValidAddress6(const uint8_t* sourceAndDestIp6,
                             bool isFromTun,
                             struct IpTunnel_Connection* conn)
 {
@@ -669,7 +669,7 @@ static bool isValidAddress6(uint8_t sour
         || AddressCalc_validAddress(&sourceAndDestIp6[16])) {
         return false;
     }
-    uint8_t* compareAddr = (isFromTun)
+    const uint8_t* compareAddr = (isFromTun)
         ? ((conn->isOutgoing) ? sourceAndDestIp6 : &sourceAndDestIp6[16])
         : ((conn->isOutgoing) ? &sourceAndDestIp6[16] : sourceAndDestIp6);
     return prefixMatches6(compareAddr, conn->connectionIp6, conn->connectionIp6Alloc);
diff -up ./util/AddrTools.c.warn ./util/AddrTools.c
--- ./util/AddrTools.c.warn	2020-10-05 17:46:19.000000000 -0400
+++ ./util/AddrTools.c	2022-10-11 19:32:11.294285728 -0400
@@ -187,7 +187,7 @@ void AddrTools_printShortIp(uint8_t outp
  *                "fc4f:630d:e499:8f5b:c49f:6e6b:01ae:3120".
  * @return 0 if successful, -1 if the hexAddr is malformed.
  */
-int AddrTools_parseIp(uint8_t out[16], const uint8_t hexAddr[40])
+int AddrTools_parseIp(uint8_t out[16], const uint8_t* hexAddr)
 {
     struct Sockaddr_storage ss;
     if (Sockaddr_parse((const char*) hexAddr, &ss)
diff -up ./util/AddrTools.h.warn ./util/AddrTools.h
--- ./util/AddrTools.h.warn	2020-10-05 17:46:19.000000000 -0400
+++ ./util/AddrTools.h	2022-10-11 19:32:11.294285728 -0400
@@ -44,7 +44,7 @@ void AddrTools_printShortIp(uint8_t outp
  *                "fc4f:630d:e499:8f5b:c49f:6e6b:01ae:3120".
  * @return 0 if successful, -1 if the hexAddr is malformed.
  */
-int AddrTools_parseIp(uint8_t out[16], const uint8_t hexAddr[40]);
+int AddrTools_parseIp(uint8_t out[16], const uint8_t* hexAddr);
 
 /**
  * Parse out an ethernet MAC address.
diff -up ./util/Bits.h.warn ./util/Bits.h
--- ./util/Bits.h.warn	2020-10-05 17:46:19.000000000 -0400
+++ ./util/Bits.h	2022-10-11 19:32:11.294285728 -0400
@@ -98,7 +98,7 @@ static inline uint64_t Bits_bitReverse64
  * @length the nuber of bytes to check for zero'd-ness.
  * @return true if all bytes checked are zero.
  */
-static inline int Bits_isZero(void* buffer, size_t length)
+static inline int Bits_isZero(const void* buffer, size_t length)
 {
     uint8_t* buff = (uint8_t*) buffer;
     for (size_t i = 0; i < length; i++) {
diff -up ./util/platform/Sockaddr.c.warn ./util/platform/Sockaddr.c
--- ./util/platform/Sockaddr.c.warn	2020-10-05 17:46:19.000000000 -0400
+++ ./util/platform/Sockaddr.c	2022-10-11 19:32:11.294285728 -0400
@@ -306,8 +306,9 @@ struct Sockaddr* Sockaddr_fromBytes(cons
 
     struct Sockaddr_pvt* out = Allocator_calloc(alloc, addrLen + Sockaddr_OVERHEAD, 1);
     Bits_memcpy(&out->ss, &ss, addrLen);
-    out->pub.addrLen = addrLen + Sockaddr_OVERHEAD;
-    return &out->pub;
+    struct Sockaddr* pub = &out->pub;
+    pub->addrLen = addrLen + Sockaddr_OVERHEAD;
+    return pub;
 }
 
 void Sockaddr_normalizeNative(void* nativeSockaddr)
@@ -344,4 +345,4 @@ void Sockaddr_addrFromHandle(struct Sock
     addr->type = Sockaddr_HANDLE;
     addr->addrLen = sizeof(struct Sockaddr);
     Bits_memcpy(&((uint8_t*)addr)[4], &handle, 4);
-}
\ No newline at end of file
+}
