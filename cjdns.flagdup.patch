diff -up ./node_build/builder.js.flagdup ./node_build/builder.js
--- ./node_build/builder.js.flagdup	2020-10-05 17:46:19.000000000 -0400
+++ ./node_build/builder.js	2023-05-02 15:09:09.595641374 -0400
@@ -182,7 +182,7 @@ const cc = function (
 ) {
     compiler(ctx, args, function (ret, out, err) {
         if (ret) {
-            return callback(error("gcc " + args.map(String).join(' ') + "\n\n" + err));
+            return callback(error(ctx.config.gcc + " " + args.map(String).join(' ') + "\n\n" + err));
         }
 
         if (err !== '') {
@@ -779,7 +779,7 @@ module.exports.configure = function (
     // if it returns undefined let's just assume 1
     // workaround, nodejs seems to be broken on openbsd (undefined result after second call)
     const cpus = Os.cpus();
-    const jobs = Math.floor((typeof cpus === 'undefined' ? 1 : cpus.length) * 1.25);
+    const jobs = 1;
 
     const pctx /*:Builder_PreCtx_t*/ = {
         buildStage: (_x,_y)=>{},
diff -up ./node_build/make.js.flagdup ./node_build/make.js
--- ./node_build/make.js.flagdup	2023-05-02 15:09:09.592641323 -0400
+++ ./node_build/make.js	2023-05-02 16:02:34.242809808 -0400
@@ -41,7 +41,6 @@ Builder.configure({
         '-std=c99',
         '-Wall',
         '-Wextra',
-        '-Werror',
         '-Wno-pointer-sign',
         '-Wmissing-prototypes',
         '-pedantic',
@@ -89,12 +88,6 @@ Builder.configure({
         builder.config.cflags.push('-D', 'ADDRESS_PREFIX_BITS=' + process.env['ADDRESS_PREFIX_BITS']);
     }
 
-    if (!builder.config.crossCompiling) {
-        if (NO_MARCH_FLAG.indexOf(process.arch) == -1) {
-            builder.config.cflags.push('-march=native');
-        }
-    }
-
     if (builder.config.systemName === 'win32') {
         builder.config.cflags.push('-Wno-format');
     } else if (builder.config.systemName === 'linux') {
@@ -144,14 +137,14 @@ Builder.configure({
     // with NEON on the BBB, or want to set -Os (OpenWrt)
     // Allow -O0 so while debugging all variables are present.
     if (CFLAGS) {
-        var cflags = CFLAGS.split(' ');
+        var cflags = CFLAGS.trim().split(/\s+/);
         cflags.forEach(function(flag) {
              if (/^\-O[^02s]$/.test(flag)) {
                 console.log("Skipping " + flag + ", assuming " + optimizeLevel + " instead.");
             } else if (/^\-O[02s]$/.test(flag)) {
                 optimizeLevel = flag;
             } else {
-                [].push.apply(builder.config.cflags, cflags);
+                builder.config.cflags.push(flag);
             }
         });
     }
@@ -164,7 +157,7 @@ Builder.configure({
     // We also need to pass various architecture/floating point flags to GCC when invoked as
     // a linker.
     if (LDFLAGS) {
-        [].push.apply(builder.config.ldflags, LDFLAGS.split(' '));
+        [].push.apply(builder.config.ldflags, LDFLAGS.trim().split(/\s+/));
     }
 
     if (android) {
